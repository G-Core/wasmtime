pub mod dsl;
mod generate;
pub mod instructions;

use std::io;
use std::path::{Path, PathBuf};
use std::process::Command;

/// Generate the assembler `file` containing the DSL-defined functions.
///
/// # Panics
///
/// This function panics if we cannot update the file or if the file has no
/// parent path.
pub fn generate_rust_assembler<P: AsRef<Path>>(file: P) -> PathBuf {
    let mut fmt = generate::Formatter::new();
    let loc = generate::FileLocation::new(file!(), line!());
    fmt.line(format!("// Generated by `generate::rust_assembler`, {loc}"), None);
    generate(file, &mut fmt, generate::rust_assembler, true)
}

pub fn generate_isle_macro<P: AsRef<Path>>(file: P) -> PathBuf {
    let mut fmt = generate::Formatter::new();
    let loc = generate::FileLocation::new(file!(), line!());
    fmt.line(format!("// Generated by `generate::isle_macro`, {loc}"), None);
    generate(file, &mut fmt, generate::isle_macro, true)
}

pub fn generate_isle_definitions<P: AsRef<Path>>(file: P) -> PathBuf {
    let mut fmt = generate::Formatter::new();
    let loc = generate::FileLocation::new(file!(), line!());
    fmt.line(format!(";; Generated by `generate::isle_definitions`, {loc}"), None);
    generate(file, &mut fmt, generate::isle_definitions, false)
}

fn generate<P: AsRef<Path>>(
    file: P,
    fmt: &mut generate::Formatter,
    generator: fn(&mut generate::Formatter, &[dsl::Inst]),
    format_rust: bool,
) -> PathBuf {
    let file = file.as_ref();
    eprintln!("Generating {}", file.display());
    generator(fmt, &instructions::list());
    fmt.write(file).unwrap();
    if format_rust {
        rustfmt(file).unwrap();
    }
    file.to_path_buf()
}

/// Use the installed `rustfmt` binary to format the generated code.
fn rustfmt(file: &Path) -> io::Result<()> {
    let status = Command::new("rustfmt").arg(file).status()?;
    if !status.success() {
        return Err(io::Error::new(
            io::ErrorKind::Other,
            format!("`rustfmt` exited with status {status}"),
        ));
    }
    Ok(())
}
